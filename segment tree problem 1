//this is the code for finding the minimum of the numbers of two arrays in between the particular intervals using segment tree concept
#include <bits/stdc++.h>
using namespace std;

class Seg{
    vector<int> seg;
    public:
    
    Seg(int n){
      seg.resize(4*n+1);
    }
    void build(int ind, int low, int high, int arr[]) {
    if (low == high) {
        seg[ind] = arr[low];
        return;
    }
    int mid = (low + high) >> 1;

    build(2 * ind + 1, low, mid, arr);
    build(2 * ind + 2, mid + 1, high, arr);

    seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
}

int query(int ind, int low, int high, int l, int r) {
    // No overlap
    if (low > r || high < l) {
        return INT_MAX;
    }
    // Complete overlap
    if (low >= l && high <= r) {
        return seg[ind];
    }
    // Partial overlap
    int mid = (low + high) >> 1;
    int left = query(2 * ind + 1, low, mid, l, r);
    int right = query(2 * ind + 2, mid + 1, high, l, r);

    return min(left, right);
}

void update(int ind, int low, int high, int i, int val) {
    if (low == high) {
        seg[ind] = val;
        return;
    }
    int mid = (low + high)>> 1;

    if (i <= mid) {
        update(2 * ind + 1, low, mid, i, val);
    } else {
        update(2 * ind + 2, mid + 1, high, i, val);
    }

    seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
}
    
};


void solve2(){
     int n1,n2;
    cin >> n1>>n2;
    int arr1[n1],arr2[n2];
    Seg s1(n1);
    for (int i = 0; i < n1; i++) {
        cin >> arr1[i];
    }
    
    s1.build(0,0,n1-1,arr1);
    for (int j = 0; j < n2; j++) {
        cin >> arr2[j];
    }
    Seg s2(n2);
    s2.build(0, 0, n2 - 1, arr2);

     int q;
    cin >> q;

    while (q--) {
        int type;
        cin >> type;
        if (type == 1) {
            int left1, right1,left2,right2;
            cin >> left1 >> right1>>left2>.right2;
            int mini1 =s1.query(0, 0, n1 - 1, left1, right1);
            int mini2=s2.query(0,0,n2-1,left2,right2);
            int mini=min(mini1,mini2);
        } else if (type == 2) {
            int i1, val1,i2,val2;
            cin >> i1 >>i2>>val1>> val2;
            s1.update(0, 0, n1 - 1, i1, val1);
             s2.update(0, 0, n2 - 1, i2, val2);
            
            arr1[i1] = val1;
            arr2[i2]=val2;
        }
    }
}

int main() {
    solve2();
    return 0;
}

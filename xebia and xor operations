//this is the code to find the xor operations in between the different levels of the given array with the help of the segment trees
#include <bits/stdc++.h>
using namespace std;

class SegmentTree {
    vector<long long> seg;
    int n;
    bool isOrLevel; // Tracks whether the current level starts with OR

public:
    SegmentTree(int size, bool startWithOr) {
        n = size;
        seg.resize(4 * n, 0);
        isOrLevel = startWithOr;
    }

    void build(int ind, int low, int high, vector<int>& arr, bool level) {
        if (low == high) {
            seg[ind] = arr[low];
            return;
        }
        int mid = (low + high) / 2;
        build(2 * ind + 1, low, mid, arr, !level);
        build(2 * ind + 2, mid + 1, high, arr, !level);

        if (level) {
            seg[ind] = seg[2 * ind + 1] | seg[2 * ind + 2];
        } else {
            seg[ind] = seg[2 * ind + 1] ^ seg[2 * ind + 2];
        }
    }

    void update(int ind, int low, int high, int pos, int val, bool level) {
        if (low == high) {
            seg[ind] = val;
            return;
        }
        int mid = (low + high) / 2;
        if (pos <= mid) {
            update(2 * ind + 1, low, mid, pos, val, !level);
        } else {
            update(2 * ind + 2, mid + 1, high, pos, val, !level);
        }

        if (level) {
            seg[ind] = seg[2 * ind + 1] | seg[2 * ind + 2];
        } else {
            seg[ind] = seg[2 * ind + 1] ^ seg[2 * ind + 2];
        }
    }

    long long getRoot() {
        return seg[0];
    }
};

void solve() {
    int n, m;
    cin >> n >> m;
    int size = (1 << n);
    vector<int> arr(size);

    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }

    bool startWithOr = (n % 2 == 1);
    SegmentTree segTree(size, startWithOr);
    segTree.build(0, 0, size - 1, arr, startWithOr);

    while (m--) {
        int p, b;
        cin >> p >> b;
        p--; // Convert to 0-based index
        segTree.update(0, 0, size - 1, p, b, startWithOr);
        cout << segTree.getRoot() << endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
    return 0;
}
